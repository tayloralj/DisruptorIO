/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.mjdetullio.gradle:coverity-plugin:1.0.10"
  }
}

apply plugin: "com.github.mjdetullio.gradle.coverity"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
	// https://mvnrepository.com/artifact/com.lmax/disruptor
	compile group: 'com.lmax', name: 'disruptor', version: '3.3.6'

        // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.25'

  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.1'
  compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.1'
  compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.1'

	compile group: 'org.agrona', name: 'agrona', version: '0.9.9'
	
  	// https://mvnrepository.com/artifact/uk.co.real-logic/sbe-all
        compile group: 'uk.co.real-logic', name: 'sbe-all', version: '1.7.0'
  	// https://mvnrepository.com/artifact/io.aeron/aeron-all
        compile group: 'io.aeron', name: 'aeron-all', version: '1.5.1'
	// https://mvnrepository.com/artifact/com.google.guava/guava
		compile group: 'com.google.guava', name: 'guava', version: '23.2-jre'
  

	// https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
		testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

	compile 'org.eclipse.collections:eclipse-collections-api:9.0.0'
	compile 'org.eclipse.collections:eclipse-collections:9.0.0'
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test/resources"
}

processTestResources.dependsOn copyTestResources

test {
    systemProperties 'property': 'value'
    // show standard out and standard error of the test JVM(s) on the console
   testLogging.showStandardStreams = true
   include 'com/ajt/disruptorIO/**'
// listen to events in the test execution lifecycle

   beforeTest { 
      descriptor -> logger.lifecycle("Running test: " + descriptor)
   }

      // listen to standard out and standard error of the test JVM(s)
   
}

// Do not apply the plugin in child projects!
// Just add the block
coverity {
    // Default values shown here
    // You only have to add them if you wish to override

    // Specifies files that should be excluded from analysis by deleting them from the emit DB using cov-manage-emit
    // Default:
    excludes = [project.buildDir]
    // Add more, in addition to the default "buildDir":
    excludes += [file('path/to/file')]

    // Whether child projects (recursive) should be part of the analysis
    includeChildProjects = true

    // Setting this to true will not skip child projects
    skip = false
}

